---
title: "clean_data"
format: html
---

```{r}
# Set time zone
Sys.setenv(TZ='Europe/London')

# Download and attach standard packages
if (!require(pacman)) {
  install.packages("pacman")
}

pacman::p_load(tidyverse, here, janitor, RMariaDB, DBI, glue, renv, dbplyr, lubridate)

i_am("R/clean_data.qmd")
```

```{r}
# Connect to CPRD database -------------------

# Connect to the MySQL database: con
con <- dbConnect(RMariaDB::MariaDB(), 
                 dbname = "cprd2023", 
                 host = "cprd-sea-2023.cisllnygqz7r.eu-west-2.rds.amazonaws.com", 
                 port = 3306,
                 user = "test",
                 password = "password")
```

## Smoking

## Obesity

```{r}
# Check cluster_ids for obesity

dbGetQuery(con, "SELECT DISTINCT(cluster_id) FROM p068_codes WHERE category IN ('Obese', 'Not obese');")
```


```{r}
cohort_def_var <- "obesity"

# Examine table

# Print final number of distinct patients
dbGetQuery(con, glue("SELECT COUNT(DISTINCT patid), COUNT(*) FROM p068_{cohort_def_var}_define;"))
```


```{r}
# Count how often each medcode is used
dbGetQuery(con, glue("SELECT medcodeid_desc, COUNT(*) AS n_rows 
                     FROM p068_{cohort_def_var}_define 
                     GROUP BY medcodeid_desc
                     ORDER BY n_rows DESC;"))
```


```{r}
# Find max number of rows per patient
dbGetQuery(con, glue("WITH t AS (
    SELECT patid, COUNT(*) AS n_rows
    FROM p068_{cohort_def_var}_define
    GROUP BY patid
    ORDER BY n_rows DESC
    LIMIT 5)
    SELECT MAX(n_rows) FROM t;"))
```

```{r}
# Examine codes
codes <- dbGetQuery(con, "SELECT * FROM p068_codes WHERE category IN ('Obese', 'Not obese');")

codes <- codes %>% 
    arrange(cluster_id)
```

```{r}
dbGetQuery(con, glue("SELECT obstypeid, COUNT(*)
           FROM p068_{cohort_def_var}_define
           GROUP BY obstypeid
           ORDER BY COUNT(*) DESC"))
```

```{r}
# Keep latest record per person
# Remove records from BMIUNDER_COD, BMIHEALTHY_COD, BMIOVER_COD, category == "Not obese"
dbExecute(con, "DROP TEMPORARY TABLE IF EXISTS p068_temp;")

dbExecute(con, "CREATE TEMPORARY TABLE p068_temp
    WITH t AS (
    SELECT *,
    ROW_NUMBER() OVER (PARTITION BY patid ORDER BY obsdate DESC) AS rn
    FROM p068_obesity_define),
    latest AS (
        SELECT
            patid,
            pracid,
            obsid,
            obsdate,
            medcodeid,
            medcodeid_desc,
            value,
            numunitid,
            obstypeid,
            include,
            category,
            cluster_id
        FROM t
        WHERE rn = 1
    )
    SELECT *
    FROM latest
    WHERE category NOT IN ('Not obese')
    AND cluster_id NOT IN ('BMIUNDER_COD', 'BMIHEALTHY_COD', 'BMIOVER_COD');")

# Print final number of distinct patients
dbGetQuery(con, glue("SELECT COUNT(DISTINCT patid), COUNT(*) FROM p068_temp;"))
```
```{r}
# Check codes are all on obesity
dbGetQuery(con, glue("SELECT medcodeid_desc, COUNT(*) AS n_rows, medcodeid 
                     FROM p068_temp
                     GROUP BY medcodeid_desc
                     ORDER BY n_rows DESC;"))
```




```{r}
# Move values for "Body mass index" (923861000006112) to another table
dbExecute(con, "CREATE TABLE p068_bmival_define
    SELECT * FROM p068_temp WHERE medcodeid = 923861000006112
    ;")

# Remove 923861000006112 rows from temp table
dbExecute(con, "DELETE FROM p068_temp WHERE medcodeid = 923861000006112")

# Replace obesity table with this table
dbExecute(con, glue("DROP TABLE p068_obesity_define;"))
    
dbExecute(con, glue("ALTER TABLE p068_temp RENAME p068_obesity_define;"))

# Check
dbGetQuery(con, glue("SELECT COUNT(DISTINCT patid), COUNT(*) FROM p068_{cohort_def_var}_define;"))
```

## Obesity - BMI value

```{r}
# Check cluster_ids for obesity

dbGetQuery(con, "SELECT DISTINCT(cluster_id) FROM p068_codes WHERE category IN ('BMI value');")
```


```{r}
cohort_def_var <- "bmival"

# Examine table

# Print final number of distinct patients
dbGetQuery(con, glue("SELECT COUNT(DISTINCT patid), COUNT(*) FROM p068_{cohort_def_var}_define;"))
```


```{r}
# Count how often each medcode is used
dbGetQuery(con, glue("SELECT medcodeid_desc, COUNT(*) AS n_rows 
                     FROM p068_{cohort_def_var}_define 
                     GROUP BY medcodeid_desc
                     ORDER BY n_rows DESC;"))
```


```{r}
# Find max number of rows per patient
dbGetQuery(con, glue("WITH t AS (
    SELECT patid, COUNT(*) AS n_rows
    FROM p068_{cohort_def_var}_define
    GROUP BY patid
    ORDER BY n_rows DESC
    LIMIT 5)
    SELECT MAX(n_rows) FROM t;"))
```



```{r}
# Examine obstypeid
dbGetQuery(con, glue("SELECT obstypeid, COUNT(*)
           FROM p068_{cohort_def_var}_define
           GROUP BY obstypeid
           ORDER BY COUNT(*) DESC"))
```

```{r}
# Examine numunitid
# Vast majority kg/m2
dbGetQuery(con, glue("SELECT numunitid, COUNT(*)
           FROM p068_{cohort_def_var}_define
           GROUP BY obstypeid
           ORDER BY COUNT(*) DESC"))
```

```{r}
# Examine codes
codes <- dbGetQuery(con, "SELECT * FROM p068_codes WHERE category IN ('BMI value');")

codes <- codes %>% 
    arrange(cluster_id)
```

```{r}
# Create a table from bmival table in mySQL
bmival_df <- tbl(con, "p068_bmival_define")
```

```{r}
# Summarise
bmival_df %>% 
    summarise(min = min(value, na.rm = T),
              mean = mean(value, na.rm = T),
              max = max(value, na.rm = T),
              n = n(),
              n_na = sum(is.na(value), na.rm = T),
              below_10 = sum(value < 10, na.rm = T),
              above_70 = sum(value > 70, na.rm = T))
```


```{r}
# Distribution
bmival_df %>% 
    collect() %>% 
    ggplot(aes(x = value)) +
    geom_histogram() +
    scale_y_continuous(trans="log10")
```

```{r}
# Examine records with extreme values
small <- bmival_df %>% 
    filter(value < 10) %>% 
    collect()

large <- bmival_df %>% 
    filter(value > 70) %>% 
    collect()

nrow(small) + nrow(large)
```

```{r}

# Distribution after removing extreme values
bmival_df %>% 
    filter(between(value, 0, 100), !is.na(value)) %>% 
    collect() %>% 
    ggplot(aes(x = value)) +
    geom_histogram(binwidth = 1) +
    scale_y_continuous(trans="log10") +
    scale_x_continuous(breaks = seq(0,100,5))

bmival_df %>% 
    filter(between(value, 10, 70), !is.na(value)) %>% 
    collect() %>% 
    ggplot(aes(x = value)) +
    geom_histogram(binwidth = 1) +
    scale_y_continuous(trans="log10") +
    scale_x_continuous(breaks = seq(0,100,5))
```
```{r}
bmival_df %>% 
    filter(between(value, 10, 70), !is.na(value)) %>%
    summarise(min = min(value, na.rm = T),
              mean = mean(value, na.rm = T),
              max = max(value, na.rm = T),
              n = n(),
              n_na = sum(is.na(value), na.rm = T))


```

```{r}
bmival_df %>% 
    filter(between(value, 10, 70), !is.na(value)) %>%
    collect() %>% 
    summarise(min = min(obsdate, na.rm = T),
              mean = mean(obsdate, na.rm = T),
              max = max(obsdate, na.rm = T),
              n_na = sum(is.na(obsdate), na.rm = T),
              pre_2015 = sum(obsdate < ymd("2015-04-01"), na.rm = T),
              pre_2013 = sum(obsdate < ymd("2013-04-01"), na.rm = T),
              post_2023 = sum(obsdate > ymd("2023-03-31"), na.rm = T))
```
```{r}
bmival_df %>% 
    filter(between(value, 10, 70), !is.na(value)) %>% 
    collect() %>% 
    ggplot(aes(x = obsdate)) +
    geom_histogram(binwidth = 1) +
    scale_y_continuous(trans="log10") +
    scale_x_continuous(breaks = seq(0,100,5))
```


```{r}
# Remove records with NA in value


# Drop extreme values
"CREATE TABLE p068_bmival_clean 
    SELECT *
    FROM p068_bmival_define
    WHERE value BETWEEN 10 AND 70
    AND obsdate >= '2013-04-01'
    AND value IS NOT NULL;"

# Drop records more than x years old
```


```{r}
# Disconnect database
dbDisconnect(con)
```