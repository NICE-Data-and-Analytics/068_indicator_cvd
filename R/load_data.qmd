---
title: "load_data"
format: html
---

```{r}
# Set time zone
Sys.setenv(TZ='Europe/London')

# Download and attach standard packages
if (!require(pacman)) {
  install.packages("pacman")
}

pacman::p_load(tidyverse, here, janitor, RMariaDB, DBI, glue, renv, dbplyr)

i_am("R/load_data.qmd")
```

```{r}
# Connect to CPRD database -------------------

# Connect to the MySQL database: con
con <- dbConnect(RMariaDB::MariaDB(), 
                 dbname = "cprd2023", 
                 host = "cprd-sea-2023.cisllnygqz7r.eu-west-2.rds.amazonaws.com", 
                 port = 3306,
                 user = "test",
                 password = "password")
```

```{r}
# Write function to read data into temporary file, filter and only permanently load for records from patid of interest
load_data <- function(con, n, filename, cohort_def_var, extra_grouping_var, categories) {
    
    # Drop temporary table if exists
    dbExecute(con, "DROP TEMPORARY TABLE IF EXISTS temp;")
    dbExecute(con, "DROP TEMPORARY TABLE IF EXISTS df;")
    
    # Create temp tables
    dbExecute(con, "CREATE TEMPORARY TABLE temp (
            patid VARCHAR(19),
            pracid INT,
            obsid VARCHAR(19) PRIMARY KEY,
            obsdate DATE,
            medcodeid VARCHAR(18),
            value FLOAT,
            numunitid INT,
            obstypeid INT
    );")
    
    dbExecute(con, glue("CREATE TEMPORARY TABLE df LIKE temp;"))
    
    # Load data into temporary table
    load_query <- glue("LOAD DATA LOCAL INFILE '{here()}/data/{filename}_{sprintf('%03d', n)}.txt'
            INTO TABLE temp
            FIELDS TERMINATED BY '\\t'
            LINES TERMINATED BY '\\r\\n'
            IGNORE 1 ROWS 
            (@patid, @dummy, @pracid, @obsid, @obsdate, @dummy, @dummy, @dummy, @medcodeid, @value, @numunitid, @obstypeid, @dummy, @dummy, @dummy) 
            SET
            	patid = NULLIF(@patid,''), 
                pracid = NULLIF(@pracid,''), 
                obsid = NULLIF(@obsid,''), 
            	obsdate = NULLIF(STR_TO_DATE(@obsdate, '%d/%m/%Y'), '0000-00-00'), 
                medcodeid = NULLIF(@medcodeid,''), 
                value = NULLIF(@value,''),  
                numunitid = NULLIF(@numunitid,''),  
                obstypeid = NULLIF(@obstypeid,'');")
    
    dbExecute(con, load_query)
    
    # Keep only rows from cohort into temp df table
    cohort_only_query <- glue("INSERT INTO df (patid, pracid, obsid, obsdate, medcodeid, value, numunitid, obstypeid)
        SELECT patid, pracid, obsid, obsdate, medcodeid, value, numunitid, obstypeid FROM temp
        WHERE patid IN (
            SELECT patid
            FROM p068_cohort_43_84
        );")
    
    dbExecute(con, cohort_only_query)
    
    # Save number of rows in temp df table
    temp_df_rows <- dbGetQuery(con, glue("SELECT COUNT(*) FROM df;")) %>% slice(1) %>% pluck(1)
    
    # Drop temporary table
    dbExecute(con, "DROP TABLE temp;")
    
    # Keep latest record per patient
    latest_rec_query <- glue("CREATE TABLE latest AS (
        WITH t AS ( -- Join df to medcode, numunitid and obstypeid dictionaries
            SELECT d.patid,
                d.pracid,
                d.obsid,
                d.obsdate,
                d.medcodeid,
                c.term AS medcodeid_desc,
                d.value,
                n.description AS numunitid,
                o.description AS obstypeid,
                c.include, 
                c.category, 
                c.cluster_id
            FROM df AS d
            -- Label units
            LEFT JOIN lookup_numunitid AS n ON d.numunitid = n.code
            -- Label obstype
            LEFT JOIN lookup_obstypeid AS o ON d.obstypeid = o.code
            -- Label medcodes
            LEFT JOIN (
                SELECT *
                FROM p068_codes
                WHERE category IN ({categories})
                ) AS c ON d.medcodeid = c.medcodeid
            -- Drop records where obstype is 1 - Allergy or 4 - Family history
            WHERE d.obstypeid NOT IN (1, 4)
            ),
        u AS ( -- Union with existing table, data previously loaded
            SELECT * FROM t
            UNION
            SELECT * FROM p068_{cohort_def_var}_define
        ),
        r AS ( -- Calculate latest record for each patient and grouping
            SELECT *,
                ROW_NUMBER() OVER (PARTITION BY patid, {extra_grouping_var} ORDER BY obsdate DESC) AS rn
            FROM u
        )
        SELECT patid,
            pracid,
            obsid,
            obsdate,
            medcodeid,
            medcodeid_desc,
            value,
            numunitid,
            obstypeid,
            include,
            category,
            cluster_id
        FROM r
        WHERE rn = 1
        );
        "
    )

    dbExecute(con, latest_rec_query)
    
    # Drop temp df table 
    dbExecute(con, "DROP TABLE df;")
    
    # Replace p068_{cohort_def_var}_define with latest
    dbExecute(con, glue("DROP TABLE p068_{cohort_def_var}_define;"))
    
    dbExecute(con, glue("ALTER TABLE latest RENAME p068_{cohort_def_var}_define;"))
    
    # Print number of rows in table
    df_rows <- dbGetQuery(con, glue("SELECT COUNT(*) FROM p068_{cohort_def_var}_define;")) %>% slice(1) %>% pluck(1)
    
    print(glue("After file {n}: {temp_df_rows} rows in file, {df_rows} rows retained overall"))
}
```

```{r}
# Run queries

# Set parameters
cohort_def_var <- "smoking"
filename <- "smoking_Define_Inc1_Observation"
extra_grouping_var <- paste0(c("cluster_id"), collapse = ", ")
categories <- paste0(paste0("'", c("Smoking status", "Current smoker"), "'"), collapse = ", ")

# Create define table
dbExecute(con, glue("CREATE TABLE p068_{cohort_def_var}_define (
            patid VARCHAR(19),
            pracid INT,
            obsid VARCHAR(19) PRIMARY KEY,
            obsdate DATE,
            medcodeid VARCHAR(18),
            medcodeid_desc VARCHAR(240),
            value FLOAT,
            numunitid INT,
            obstypeid INT,
	        include VARCHAR(25),
            category VARCHAR(50),
            cluster_id VARCHAR(25)
    );"))

# Check table created
dbGetQuery(con, glue("DESCRIBE p068_{cohort_def_var}_define;"))
```

```{r}
# Specify which files
file_seq <- 4:67

# Run function to read all data
walk(file_seq, \(x) load_data(n = x, con = con, filename = filename, cohort_def_var = cohort_def_var, extra_grouping_var = extra_grouping_var, categories = categories))
```

```{r}
# dbExecute(con, "DROP TABLE IF EXISTS test;")
# dbGetQuery(con, glue("DESCRIBE latest;"))
```


```{r}
# Load codelist
codelist_file <- "smoking_cprd_plus.txt"

# Load codelist into p068_codes dictionary
load_dict_query <- glue("LOAD DATA LOCAL INFILE '{here('codes', codelist_file)}'
    INTO TABLE p068_codes 
    FIELDS TERMINATED BY ' '
    ENCLOSED BY '\"'
    LINES TERMINATED BY '\\n'
    IGNORE 1 ROWS 
    (@cluster_id, @cluster_description, @dummy, @dummy, @dummy, @dummy, @medcodeid, @dummy, @dummy, @dummy, @term, @dummy, @dummy, @dummy, @include, @dummy, @category) 
    SET
    	cluster_id = NULLIF(@cluster_id,''), 
        cluster_description = NULLIF(@cluster_description,''),  
        medcodeid = NULLIF(@medcodeid,''), 
        term = NULLIF(@term,''), 
        include = NULLIF(@include,''),  
        category = NULLIF(@category,'');"
    )

# Run
dbExecute(con, load_dict_query)

# Check if loaded properly
dbGetQuery(con, "SELECT DISTINCT category FROM p068_codes;")
```



```{r}
# Write cohort IDs to text file

# cohort_lsoa <- dbGetQuery(con, "SELECT * FROM p068_cohort_43_84_lsoa;")

## Split into list of 8 tables due to file size
# cohort_lsoa_split <- split(cohort_lsoa, cut_width(1:nrow(cohort_lsoa),656000,boundary=0))

## Loop through list and write each text file
# walk(1:length(cohort_lsoa_split), \(x) cohort_lsoa_split[[x]] %>% write_delim(here("data", glue("24_003834_NICE_patientlist_{x}.txt")), delim = "\t"))

```

```{r}
# # Filter previously loaded define tables so only the records for patients of interest remain
# # Keep only columns of interest
# # Previous define table has ALL the records in CPRD Aurum for the codelist
# 
# df_name <- list("p068_ckd_define", 
#                 "p068_cvd_define",
#                 "p068_cvdriskass_define",
#                 "p068_fhyp_define",
#                 "p068_slupus_define", 
#                 "p068_t1dm_define")
# 
# for (i in df_name) {
#     
#     # Number of rows before
#     before <- dbGetQuery(con, glue("SELECT COUNT(*) FROM {i};")) %>% slice(1) %>% pluck(1)
#     
#     # Keep only records for cohort and columns of interest
#     dbExecute(con, glue("CREATE TABLE temp_def (
#         SELECT
#             patid,
#             pracid,
#             obsid, 
#             obsdate,
#             medcodeid,
#             value,
#             numunitid,
#             obstypeid
#         FROM {i}
#         WHERE patid IN (
#             SELECT patid FROM p068_cohort_43_84
#         )
#     );"))
#     
#     # Drop original define table
#     dbExecute(con, glue("DROP TABLE {i};"))
#     
#     # Rename table
#     dbExecute(con, glue("ALTER TABLE temp_def RENAME {i};"))
#     
#     # Number of rows after
#     after <- dbGetQuery(con, glue("SELECT COUNT(*) FROM {i};")) %>% slice(1) %>% pluck(1)
# 
#     # Print
#     print(glue("nrows before: {before}, nrows after: {after}"))
# }


```


```{r}
# Disconnect database
dbDisconnect(con)
```

